
set(SRCROOT ${PROJECT_SOURCE_DIR}/tools/ImageGenerator)

# all source files
set(ImageGenerator_SRC ${SRCROOT}/ImageGenerator.cpp ${SRCROOT}/imageUtils.cpp)

# define the ImageGenerator target
add_executable(ImageGenerator ${ImageGenerator_SRC})

if(SFML_FOUND)
    target_include_directories(ImageGenerator PRIVATE ${SFML_INCLUDE_DIR})
    target_link_libraries(ImageGenerator PRIVATE ${SFML_LIBRARIES})
endif(SFML_FOUND)

target_link_libraries(ImageGenerator PRIVATE EvoAI)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    message(STATUS "ImageGenerator - Compiler gcc")
    target_compile_options(ImageGenerator PRIVATE -std=c++17 -Wall -Wextra -Wshadow)
    if(EvoAI_BUILD_STATIC)
        target_link_options(ImageGenerator PRIVATE -static -static-libgcc -static-libstdc++)
    endif()
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        target_compile_options(ImageGenerator PRIVATE -O3 -fexpensive-optimizations -DNDEBUG)
    elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_options(ImageGenerator PRIVATE -g)
    endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    message(STATUS "ImageGenerator - Compiler clang")
    target_compile_options(ImageGenerator PRIVATE -std=c++17 -Wall -Wextra -Wshadow)
    if(EvoAI_BUILD_STATIC)
        if(NOT APPLE)
            target_link_options(ImageGenerator PRIVATE -static -static-libgcc -static-libstdc++)
        endif()
    endif()
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        target_compile_options(ImageGenerator PRIVATE -O3 -DNDEBUG)
    elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_options(ImageGenerator PRIVATE -g)
    endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    message(STATUS "ImageGenerator - Compiler MSVC")
    target_compile_options(ImageGenerator PRIVATE /std:c++17 /W4)
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        target_compile_options(ImageGenerator PRIVATE /O3 /DNDEBUG)
    elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
        target_compile_options(ImageGenerator PRIVATE /g)
    endif()
else()
    message(WARNING "ImageGenerator - Compiler not supported.")
endif()

include(GNUInstallDirs)
install(TARGETS ImageGenerator RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})